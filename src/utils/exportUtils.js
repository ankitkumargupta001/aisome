import html2canvas from "html2canvas";
import jsPDF from "jspdf";

export class ExportUtils {
  // Export as PDF
  static async exportToPDF(article, elementId = "summary-content") {
    try {
      const element = document.getElementById(elementId);
      if (!element) {
        throw new Error("Element not found for PDF export");
      }

      const canvas = await html2canvas(element, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
      });

      const imgData = canvas.toDataURL("image/png");
      const pdf = new jsPDF("p", "mm", "a4");

      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      const imgWidth = canvas.width;
      const imgHeight = canvas.height;
      const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
      const imgX = (pdfWidth - imgWidth * ratio) / 2;
      const imgY = 30;

      // Add title
      pdf.setFontSize(16);
      pdf.text("AI Summary Report", pdfWidth / 2, 20, { align: "center" });

      pdf.addImage(imgData, "PNG", imgX, imgY, imgWidth * ratio, imgHeight * ratio);

      const fileName = `summary-${new Date().getTime()}.pdf`;
      pdf.save(fileName);

      return fileName;
    } catch (error) {
      console.error("Error exporting to PDF:", error);
      throw error;
    }
  }

  // Export as Markdown
  static exportToMarkdown(article) {
    const timestamp = new Date().toLocaleDateString();

    let markdown = `# Article Summary\n\n`;
    markdown += `**URL:** ${article.url}\n\n`;
    markdown += `**Date:** ${timestamp}\n\n`;

    if (article.title) {
      markdown += `**Title:** ${article.title}\n\n`;
    }

    markdown += `## Summary\n\n${article.summary}\n\n`;

    if (article.insights) {
      markdown += `## Key Insights\n\n${article.insights}\n\n`;
    }

    if (article.sentiment) {
      markdown += `## Sentiment Analysis\n\n${article.sentiment}\n\n`;
    }

    if (article.translation) {
      markdown += `## Translation\n\n${article.translation}\n\n`;
    }

    markdown += `---\n*Generated by AI Summarizer 2025*`;

    const blob = new Blob([markdown], { type: "text/markdown" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `summary-${new Date().getTime()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    return `summary-${new Date().getTime()}.md`;
  }

  // Export as JSON
  static exportToJSON(article) {
    const exportData = {
      ...article,
      exportedAt: new Date().toISOString(),
      version: "2.0",
    };

    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `summary-${new Date().getTime()}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    return `summary-${new Date().getTime()}.json`;
  }

  // Export as Text
  static exportToText(article) {
    const timestamp = new Date().toLocaleDateString();

    let text = `ARTICLE SUMMARY\n`;
    text += `${"=".repeat(50)}\n\n`;
    text += `URL: ${article.url}\n`;
    text += `Date: ${timestamp}\n\n`;

    if (article.title) {
      text += `Title: ${article.title}\n\n`;
    }

    text += `SUMMARY\n`;
    text += `${"-".repeat(20)}\n`;
    text += `${article.summary}\n\n`;

    if (article.insights) {
      text += `KEY INSIGHTS\n`;
      text += `${"-".repeat(20)}\n`;
      text += `${article.insights}\n\n`;
    }

    if (article.sentiment) {
      text += `SENTIMENT ANALYSIS\n`;
      text += `${"-".repeat(20)}\n`;
      text += `${article.sentiment}\n\n`;
    }

    if (article.translation) {
      text += `TRANSLATION\n`;
      text += `${"-".repeat(20)}\n`;
      text += `${article.translation}\n\n`;
    }

    text += `Generated by AI Summarizer 2025`;

    const blob = new Blob([text], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `summary-${new Date().getTime()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    return `summary-${new Date().getTime()}.txt`;
  }

  // Share via Web Share API
  static async shareArticle(article) {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `Article Summary: ${article.title || "Untitled"}`,
          text: article.summary,
          url: article.url,
        });
        return true;
      } catch (error) {
        console.error("Error sharing:", error);
        return false;
      }
    } else {
      // Fallback - copy to clipboard
      try {
        const shareText = `Check out this article summary:\n\n${article.summary}\n\nOriginal: ${article.url}`;
        await navigator.clipboard.writeText(shareText);
        return true;
      } catch (error) {
        console.error("Error copying to clipboard:", error);
        return false;
      }
    }
  }
}
